@page "/contract-generator"
@using ContractGeneratorBlazor.Services
@inject IContractService ContractService

<PageTitle>Contract Generator</PageTitle>

<h3>Contract Generator</h3>

<div class="mb-3">
    <label>Upload Excel File:</label>
    <InputFile OnChange="HandleExcelUpload" />
</div>

<div class="mb-3">
    <label>Select Contract Type:</label>
    <select @bind="selectedContractType" class="form-select">
        @foreach (var type in contractTypes)
        {
            <option value="@type">@type</option>
        }
    </select>
</div>

<div class="mb-3">
    <label>Select Output Format:</label>
    <select @bind="outputFormat" class="form-select" disabled>
        <option value="Word">Word</option>
    </select>
</div>

<button class="btn btn-primary" @onclick="GenerateContracts" disabled="@isProcessing">Generate</button>
@if (isProcessing)
{
    <div class="mt-3">
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        <span class="ms-2">Generating contracts, please wait...</span>
    </div>
}

@if (!string.IsNullOrEmpty(downloadUrl))
{
    <div class="mt-3">
        <a href="@downloadUrl" download="Contracts.zip" class="btn btn-success">Download Contracts</a>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private IBrowserFile? excelFile;
    private string selectedContractType = string.Empty;
    private List<string> contractTypes = new();
    private string outputFormat = "Word"; // Only Word output is supported
    private bool isProcessing = false;
    private string? downloadUrl;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        contractTypes = ContractService.GetContractTypes();
        if (contractTypes.Any())
            selectedContractType = contractTypes.First();
    }

    private void HandleExcelUpload(InputFileChangeEventArgs e) => excelFile = e.File;

    private async Task GenerateContracts()
    {
        errorMessage = null;
        if (excelFile == null || string.IsNullOrEmpty(selectedContractType))
            return;

        isProcessing = true;
        try
        {
            using var excelStream = excelFile.OpenReadStream();
            var zipBytes = await ContractService.GenerateContractsAsync(excelStream, selectedContractType, outputFormat);
            downloadUrl = "data:application/zip;base64," + Convert.ToBase64String(zipBytes);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        isProcessing = false;
    }
}
