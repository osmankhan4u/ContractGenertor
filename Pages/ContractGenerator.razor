@page "/contract-generator"
@using ContractGeneratorBlazor.Services
@inject IContractService ContractService

<PageTitle>Contract Generator</PageTitle>

<h3>Contract Generator</h3>

<div class="mb-3">
    <label>Upload Word Template:</label>
    <InputFile OnChange="HandleTemplateUpload" />
</div>
<div class="mb-3">
    <label>Upload Excel File:</label>
    <InputFile OnChange="HandleExcelUpload" />
</div>

<button class="btn btn-primary" @onclick="GenerateContracts" disabled="@isProcessing">Generate</button>
@if (isProcessing)
{
    <div class="mt-3">
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        <span class="ms-2">Generating contracts, please wait...</span>
    </div>
}

@if (!string.IsNullOrEmpty(downloadUrl))
{
    <div class="mt-3">
        <a href="@downloadUrl" download="Contracts.zip" class="btn btn-success">Download Contracts</a>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private IBrowserFile? excelFile;
    private IBrowserFile? templateFile;
    private bool isProcessing = false;
    private string? downloadUrl;
    private string? errorMessage;

    // No contract types needed, template is uploaded directly

    private void HandleExcelUpload(InputFileChangeEventArgs e) => excelFile = e.File;
    private void HandleTemplateUpload(InputFileChangeEventArgs e) => templateFile = e.File;

    private async Task GenerateContracts()
    {
        errorMessage = null;
        if (excelFile == null || templateFile == null)
            return;

        isProcessing = true;
        try
        {
            using var excelStream = excelFile.OpenReadStream();
            using var templateStream = templateFile.OpenReadStream();
            var zipBytes = await ContractService.GenerateContractsFromFilesAsync(templateStream, excelStream);
            downloadUrl = "data:application/zip;base64," + Convert.ToBase64String(zipBytes);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        isProcessing = false;
    }
}
